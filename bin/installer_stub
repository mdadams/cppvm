#! /usr/bin/env bash

eecho()
{
	echo "$@" 1>&2
}

panic()
{
	echo "ERROR: $@" 1>&2
	exit 1
}

sde_repo_url="https://github.com/mdadams/sde.git"

tmp_dir_base=
log_file=
mvmdi_setup=

test_mode=0

while getopts f:l:nt: opt; do
	case $opt in
	l)
		log_file="$OPTARG";;
	f)
		mvmdi_setup="$OPTARG";;
	n)
		test_mode=1;;
	t)
		tmp_dir_base="$OPTARG";;
	esac
done
shift $((OPTIND - 1))

if [ "$test_mode" -ne 0 ]; then
	if [ -z "$log_file" ]; then
		panic "no log file specified"
	fi
	if [ -z "$mvmdi_setup" ]; then
		panic "no setup file specified"
	fi
	if [ -z "$tmp_dir_base" ]; then
		panic "no temporary directory specified"
	fi
	tty_dev=$(tty) || panic "cannot get terminal"
else
	log_file="/root/install_sde.log"
	mvmdi_setup="/root/mvmdi_setup.sh"
	tty_dev="/dev/tty10"
	tmp_dir_base="/tmp"
fi


if [ -z "$log_file" ]; then
	panic "no log file specified"
fi
if [ -z "$tty_dev" ]; then
	panic "no TTY device specified"
fi
if [ -z "$mvmdi_setup" ]; then
	panic "no setup file specified"
fi

if [ -f "$log_file" ]; then
	rm -f "$log_file" || panic "cannot remove log file"
fi

{

	if [ ! -f "$mvmdi_setup" ]; then
		panic "missing MVMDI setup file"
	fi
	source "$mvmdi_setup"

	if [ -z "$MVMDI_SDE_VERSION" ]; then
		#panic "no SDE version specified"
		echo "MVMDI_SDE_VERSION empty or not set"
		echo "skipping installation of SDE"
		exit 0
	fi
	sde_version="$MVMDI_SDE_VERSION"
	if [ -z "$MVMDI_SDE_INSTALL_DIR" ]; then
		panic "no SDE installation directory specified"
	fi
	sde_install_dir="$MVMDI_SDE_INSTALL_DIR"

	tmp_dir=$(mktemp -d "$tmp_dir_base/mvmdi-XXXXXXXXXX") || \
	  panic "cannot make directory $tmp_dir"

	sde_git_dir="$tmp_dir/sde"
	sde_commit="v$sde_version"

	echo "SDE version: $sde_version"
	echo "SDE installation directory: $sde_install_dir"
	echo "SDE Git repository: $sde_repo_url"
	echo "SDE commit: $sde_commit"
	echo "temporary directory: $tmp_dir_base"

	sde_default_env=base

	# basic settings
	export SDE_TMPDIR="$tmp_dir_base"

	# select some packages for installation
	#export SDE_TEXLIVE_INSTALL=1
	export SDE_TEXLIVE_INSTALL=0
	export SDE_VIM_INSTALL=0
	export SDE_CGAL_INSTALL=1
	export SDE_HUB_INSTALL=0
	export SDE_GHI_INSTALL=0
	export SDE_GH_INSTALL=0
	export SDE_GCC_GO_INSTALL=0
	export SDE_YCM_INSTALL=0

	# GCC settings
	# NOTE: add rust support in the future
	export SDE_GCC_INSTALL_OPTIONS="--num-jobs 8 --enable-languages c,c++,fortran --no-default-pie --no-old-abi --strip"
	export SDE_ALT_GCC_INSTALL=${MVMDI_SDE_ALT_GCC_INSTALL:-0}

	# LLVM settings
	export SDE_CLANG_INSTALL_OPTIONS="--num-jobs 8 --num-parallel-compile-jobs 8 --num-parallel-link-jobs 1"
	export SDE_ALT_CLANG_INSTALL=${MVMDI_SDE_ALT_CLANG_INSTALL:-0}

	# Boost settings
	# The following setting is a workaround for Boost not correctly finding
	# the Python installation.  In the pathname for the include directory
	# for Python, the "m" in "python3.7m" appears to be problematic.
	#export SDE_BOOST_CONFIG_DATA="using python : 3.7 : /usr/bin/python3 : /usr/include/python3.7m : /usr/lib ;"

	git clone -q "$sde_repo_url" "$sde_git_dir" || \
	  panic "cannot clone repository $sde_repo_url"

	(cd "$sde_git_dir" && git checkout -q "$sde_commit") || \
	  panic "cannot checkout branch/commit $sde_commit"

	sde_install_opts=()
	sde_install_opts+=(-f)
	"$sde_git_dir/installer" \
	  -d "$sde_install_dir" -e "$sde_default_env" \
	  "${sde_install_opts[@]}" || \
	  panic "cannot install SDE"

} 2>&1 | tee -a "$log_file" > "$tty_dev"

pipe_status=("${PIPESTATUS[@]}")
if [ "${pipe_status[0]}" -ne 0 ]; then
	panic "installation failed"
fi
if [ "${pipe_status[1]}" -ne 0 ]; then
	panic "tee failed"
fi
