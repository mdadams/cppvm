#! /usr/bin/env bash

panic()
{
	echo "error: $@"
	exit 1
}

get_time()
{
	date +"%Y-%m-%d %H:%M:%S"
}

vm_get_state()
{

	local name="$1"
	local buffer
	# Note: Do not put local on the next line as this changes the exit status.
	buffer=$(virsh dominfo "$name" 2> /dev/null) || return 1
	local state=$(sed -n -e 's/^State:[ ]*\(.*\)$/\1/p' <<< "$buffer")
	case "$state" in
	"shut off")
		echo "shut_off";;
	running)
		echo "running";;
	"in shutdown")
		echo "in_shutdown";;
	paused)
		echo "paused";;
	*)
		echo "unknown ($state)";;
	esac
}

vm_wait_for_shutoff()
{
	local name="$1"
	echo "waiting for shutoff"
	while true; do
		state=$(vm_get_state "$name") || return 1
		if [ "$state" = shut_off ]; then
			break
		fi
		sleep 30
	done
	echo "finished wait for shutoff"
	return 0
}

get_checksum()
{
	local file="$1"
	sha512sum - < "$file" | awk '{print $1;}' -
}

usage()
{
	local fedora_release
	local sde_version
	local sde_name
	#fedora_release=31
	fedora_release=33
	#sde_version=4.0.36
	#sde_version=4.0.70
	sde_version=4.1.5
	sde_name=$(echo "$sde_version" | tr '.' '_')
	local data_dir
	data_dir=$(realpath "$cmd_dir/../data") || data_dir=
	cat <<- EOF
	Usage
	=====

	$0 -d work_dir -n vm_name -k ks_file -r sde_version

	Options
	=======

	-r \$sde_version
	Set the version of the SDE to install.
	If \$sde_version is an empty string, the installation of SDE is skipped.

	Examples
	========

	$0 -n f28_xfce -R 28 -r 0.0.0 -k $data_dir/minimal_xfce.ks -d f28_xfce
	$0 -n f29_xfce -R 29 -r 0.0.0 -k $data_dir/minimal_xfce.ks -d f29_xfce
	$0 -n f30_xfce -R 30 -r 0.0.0 -k $data_dir/minimal_xfce.ks -d f30_xfce

	$0 -n f${fedora_release} -R $fedora_release -r "" -k $data_dir/minimal_xfce_sde.ks -d f${fedora_release}

	$0 -n f${fedora_release}_sde_${sde_name} -R $fedora_release -r ${sde_version} -k $data_dir/minimal_xfce_sde.ks -d f${fedora_release}_sde_${sde_name}
	EOF
	exit 2
}

cmd_dir=$(dirname "$0") || panic "cannot get program directory"
root_dir="$cmd_dir/.."
data_dir="$root_dir/data"

tmp_dir=/var/tmp
debug_level=0
sparsify=1
ks_file=
work_dir=
name=
mirror=muug
sde_version_valid=0
sde_version=
vmdi_dir=/var/lib/libvirt/images
fedora_release=
use_netinst_file=0

while getopts D:d:n:k:t:m:xz:r:R:N opt; do
	case "$opt" in
	d)
		work_dir="$OPTARG";;
	n)
		name="$OPTARG";;
	k)
		ks_file="$OPTARG";;
	D)
		debug_level="$OPTARG";;
	t)
		tmp_dir="$OPTARG";;
	m)
		mirror="$OPTARG";;
	x)
		sparsify=0;;
	z)
		vmdi_dir="$OPTARG";;
	r)
		sde_version="$OPTARG"; sde_version_valid=1;;
	R)
		fedora_release="$OPTARG";;
	N)
		use_netinst_file=1;;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 1 ]; then
	set -xv
fi

if [ -z "$fedora_release" ]; then
	usage "no Fedora release specified"
fi

if [ "$sde_version_valid" -eq 0 ]; then
	usage "no SDE version specified"
fi
if [ -z "$work_dir" ]; then
	usage "no work directory specified"
fi
work_dir=$(realpath "$work_dir") || panic "cannot get realpath"
if [ -z "$name" ]; then
	usage "no VM name specified"
fi
if [ -z "$ks_file" ]; then
	usage "no kickstart file specified"
fi

if [ ! -f "$ks_file" ]; then
	panic "kickstart file is missing"
fi

if [ -z "$tmp_dir" ]; then
	tmp_dir="${TMPDIR:-/tmp}"
fi
tmp_dir=$(realpath "$tmp_dir") || panic "cannot get realpath"

case "$mirror" in
muug)
	mirror_base_url="https://muug.ca/mirror/fedora/linux"
	;;
kernel)
	mirror_base_url="https://ewr.edge.kernel.org/fedora-buffet/fedora/linux"
	;;
*)
	mirror_base_url="https://download.fedoraproject.org/pub/fedora/linux"
	;;
esac

if [ "$use_netinst_file" -ne 0 ]; then
	case "$fedora_release" in
	28)
		netinst_version="1.1";;
	29)
		netinst_version="1.2";;
	30)
		netinst_version="1.2";;
	*)
		panic;;
	esac
	netinst_url="$mirror_base_url/releases/$fedora_release/Everything/x86_64/iso/Fedora-Everything-netinst-x86_64-$fedora_release-$netinst_version.iso"
fi

ks_url="$mirror_base_url/releases/$fedora_release/Everything/x86_64/os/"

cat <<- EOF
work directory: $work_dir
kickstart file: $ks_file
VM name: $name
temporary directory: $tmp_dir
sparsify: $sparsify
mirror: $mirror
mirror base URL: $mirror_base_url
kickstart URL: $ks_url
netinstall file: $netinst_file
EOF

#exit

download_dir="$work_dir/downloads"
image_dir="$work_dir/images"
gen_ks_file="$work_dir/kickstart.ks"
gen_ks_base=$(basename "$gen_ks_file") || \
  panic "cannot get base name"

if [ "$use_netinst_file" -ne 0 ]; then
	netinst_base=$(basename "$netinst_url") || panic "cannot get base name"
	netinst_file="$download_dir/$netinst_base"
fi

disk_file="$vmdi_dir/$name.qcow2"
orig_file="$image_dir/$name-original.qcow2"
orig_csum_file="$orig_file-SHA512SUM"
qcow2_file="$image_dir/$name.qcow2"
gzip_qcow2_file="$qcow2_file.gz"
vmdk_file="$image_dir/$name.vmdk"
gzip_vmdk_file="$vmdk_file.gz"
vdi_file="$image_dir/$name.vdi"
gzip_vdi_file="$vdi_file.gz"
csum_file="$image_dir/SHA512SUM"

for dir in "$work_dir" "$download_dir" "$image_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir "$dir" || panic "cannot make directory $dir"
		chmod a+rx "$dir"
	fi
done

echo "START TIME: $(get_time)"

ls -l "$work_dir"
ls -l "$download_dir"
ls -l "$image_dir"

echo "Preparing kickstart file"
if [ -f "$gen_ks_file" ]; then
	rm -f "$gen_ks_file" || panic "cannot remove temporary kickstart file"
fi
cp "$ks_file" "$gen_ks_file" || panic "cannot copy kickstart file"
sed -i "s|__KS_URL__|$ks_url|g" "$gen_ks_file" || \
  panic "cannot update temporary kickstart file"

if [ "$use_netinst_file" -ne 0 ]; then
	if [ ! -f "$netinst_file" ]; then
		wget -O "$netinst_file" "$netinst_url" || \
		  panic "cannot download netinst"
	fi
fi

if [ ! -f "$disk_file" ]; then
	for file in "$orig_file" "$orig_csum_file"; do
		if [ -f "$file" ]; then
			rm -f "$file" || panic "cannot remove file $file"
		fi
	done

	command=(virt-install)

	command+=(--debug)
	command+=(--name "$name")

	command+=(--os-type linux)
	# The following causes dracut initqueue timeout.
	#command+=(--os-variant "fedora$fedora_release")

	command+=(--memory 16384)
	command+=(--vcpus 4)
	command+=(--disk path=$disk_file,format=qcow2,size=16)
	command+=(--network bridge=virbr0)
	command+=(--graphics spice)

	if [ "$use_netinst_file" -ne 0 ]; then
		command+=(--location "$netinst_file")
		#command+=(--location "$netinst_file",kernel=isolinux/vmlinuz,initrd=isolinux/initrd.gz)
	else
		command+=(--location "$ks_url")
	fi
	command+=(--initrd-inject "$gen_ks_file")
	#command+=(--extra-args "ks=file:/$gen_ks_base")
	command+=(--extra-args "inst.ks=file:/$gen_ks_base")
	command+=(--extra-args "MVMDI_SDE_VERSION=$sde_version")
	command+=(--extra-args "MVMDI_SDE_INSTALL_DIR=/opt/sde")

	command+=(--events on_poweroff=preserve)

	echo "COMMAND: ${command[*]}"
	"${command[@]}" || panic "virt-install failed"
	vm_wait_for_shutoff "$name" || panic "wait for VM shut off failed"
	echo "INSTALL FINISHED: $(get_time)"
fi

if [ ! -f "$disk_file" ]; then
	panic "disk image missing"
fi

clean=1
if [ "$clean" -ne 0 ]; then
	for file in "$orig_file" "$qcow2_file" "$gzip_qcow2_file" "$vdi_file" \
	  "$gzip_vdi_file" "$vmdk_file" "$gzip_vmdk_file" "$csum_file"; do
		if [ -f "$file" ]; then
			rm -f "$file" || panic "cannot remove file $file"
		fi
	done
	ls -al "$image_dir"
fi

if [ ! -f "$orig_file" ]; then
	echo "copying created disk image"
	cp "$disk_file" "$orig_file" || panic "cannot copy file"
	chmod a-w "$orig_file" || panic "cannot change file permissions"
	echo "COPY FINISHED: $(get_time)"
	get_checksum "$orig_file" > "$orig_csum_file" || \
	  panic "cannot make checksum file"
fi

if [ ! -f "$orig_file" ]; then
	panic "missing file $orig_file"
fi

vm_wait_for_shutoff "$name" || panic "wait for VM shut off failed"
echo "WAIT FINISHED: $(get_time)"

ls -l "$image_dir"

if [ ! -f "$qcow2_file" ]; then
	echo "Making sparse QCOW2 image"
	if [ "$sparsify" -ne 0 ]; then
		TMPDIR="$tmp_dir" \
		  LIBGUESTFS_BACKEND=direct \
		  virt-sparsify "$orig_file" "$qcow2_file" || \
		  panic "cannot sparsify VM image"
	else
		cp "$orig_file" "$qcow2_file" || \
		  panic "cannot copy file"
	fi
	ls -l "$qcow2_file"
fi

if [ ! -f "$gzip_vdi_file" ]; then
	echo "Converting from QCOW2 to VDI"
	qemu-img convert -f qcow2 -O vdi \
	  "$qcow2_file" "$vdi_file" || \
	  panic "cannot convert image"
	ls -l "$vdi_file"
	echo "Compressing VDI image"
	gzip "$vdi_file" || panic "cannot compress image"
	ls -l "$gzip_vdi_file"
fi

if [ ! -f "$gzip_vmdk_file" ]; then
	echo "Converting from QCOW2 to VMDK"
	qemu-img convert -f qcow2 -O vmdk \
	  -o adapter_type=lsilogic,subformat=streamOptimized,compat6 \
	  "$qcow2_file" "$vmdk_file" || \
	  panic "cannot convert image"
	ls -l "$vmdk_file"
	echo "Compressing VMDK image"
	gzip "$vmdk_file" || panic "cannot compress image"
	ls -l "$gzip_vmdk_file"
fi

if [ ! -f "$gzip_qcow2_file" ]; then
	echo "Compressing QCOW2 image"
	gzip "$qcow2_file" || panic "cannot compress image"
	ls -l "$gzip_qcow2_file"
fi

echo "List files"
ls -l "$image_dir"

args=()
for file in "$orig_file" "$qcow2_file" "$gzip_qcow2_file" \
  "$vdi_file" "$gzip_vdi_file" "$vmdk_file" "$gzip_vmdk_file"; do
	if [ -f "$file" ]; then
		args+=($(basename "$file")) || panic
	fi
done

(cd "$image_dir" && sha512sum "${args[@]}") > "$csum_file" || \
  panic "cannot generate checksum file"

echo "FINISHED: $(get_time)"

cleanup=1
if [ "$cleanup" -ne 0 ]; then
	state=$(vm_get_state "$name") || panic "cannot get VM state"
	if [ "$state" != shut_off ]; then
		virsh destroy "$name" || \
		  panic "cannot shut off VM"
	fi
	#virsh undefine "$name" || \
	#  panic "virsh undefine failed"
	virsh undefine --remove-all-storage "$name" || \
	  panic "virsh undefine failed"
	#virsh vol-delete --pool default "$name.qcow2" || \
	#  panic "virsh vol-delete failed"
fi

exit
